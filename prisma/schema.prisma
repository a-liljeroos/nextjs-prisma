// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments Comment[]
  content   Json?
  createdAt DateTime @default(now())
  imageFolder String? @db.VarChar(255)
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  content   String
  contentHistory Json?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  updatedAt DateTime @updatedAt
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  image String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  comments Comment[]
  createdAt DateTime @default(now())
  email   String?   @db.VarChar(255) 
  name    String @db.VarChar(40) @unique
  password String  @db.VarChar(255) @default("")
  posts   Post[]
  profile Profile?
  role    String   @default("USER")
}